<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans     
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<!--这块是requestMapping对应的配置   只要有对应协议的解析器，你就可以通过几行配置，几个注解完成协议——对象的转换工作. -->
	<!-- 在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有@Component 
		@Controller@Service等这些注解的类，则把这些类注册为bean -->
	<context:component-scan base-package="goddess.*" />
	<mvc:annotation-driven />
	<context:property-placeholder location="/WEB-INF/hibernate.properties" />
	<!-- mapping是网页里的引用，location是资源实际所在的位置 -->
	<mvc:resources mapping="resources/**" location="/resources/"/>
	<!--定义视图 -->
	<bean id="viewResolver1"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView</value>
		</property>
		<property name="prefix">
			<value></value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
		<property name="order">
			<value>0</value>
		</property>
	</bean>
	
		<!--  这里申明的id必须为multipartResolver  -->
<bean id="multipartResolver"
    class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- one of the properties available; the maximum file size in bytes -->
    <property name="maxUploadSize" value="10000000"/>
</bean>

	<!-- 定义数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${dataSource.driverClassName}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect
				</prop>
				<!-- <prop key="hibernate.show_sql">true</prop> 
    			<prop key="hibernate.format_sql">true</prop> -->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>goddess.entity</value>
			</list>
		</property>
	</bean>
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"/>
	</bean> -->
	
	<!-- <bean id="xssFilter" class="yjj.xssfitler.XssHttpServletRequestWrapper">
	<property name="orgRequest"><null/></property>
	</bean> -->
	
</beans>